class Solution {
  public:
    // Function to build the tree from given inorder and preorder traversals
    int pos(vector<int> inorder, int n, int element){
        for(int i=0; i<n; i++){
            if(inorder[i] == element){
                return i;
            }
        }
        return -1;
    }
    Node* solve(vector<int> inorder, vector<int> preorder, int n,int &index, int preorder_start, int preorder_end){
        if(index >= n || preorder_start > preorder_end){
            return NULL;
        }
        
        int element = preorder[index++];
        Node* root = new Node(element);
        int position = pos(inorder, n, element);
        
        root->left = solve(inorder, preorder, n, index, 0, position-1);
        root->right =solve(inorder, preorder, n, index, position+1, n-1);
        return root;
    }
        
    Node *buildTree(vector<int> &inorder, vector<int> &preorder) {
        int n = preorder.size();
        // int preorder_start = 0;
        // int preorder_end = n-1;
        int index = 0;
        
        Node* ans = solve(inorder, preorder, n,index, 0, n-1);
        return ans;
    }
};
