class Solution {
private:
    vector<int> rightmin_ans(vector<int>& heights, int n){
        vector<int> ans(n);
        stack<int> st;
        st.push(n);  // Instead of -1, use n for right boundary
        for(int i=n-1; i>=0; i--){
            while(st.top() != n && heights[st.top()] >= heights[i]){
                st.pop();
            }
            ans[i] = st.top();  // Store the index, not the value
            st.push(i);
        }
        return ans;
    }
    
    vector<int> leftmin_ans(vector<int>& heights, int n){
        vector<int> ans(n);
        stack<int> st;
        st.push(-1);  // Use -1 for left boundary
        for(int i=0; i<n; i++){
            while(st.top() != -1 && heights[st.top()] >= heights[i]){
                st.pop();
            }
            ans[i] = st.top();  // Store the index, not the value
            st.push(i);
        }
        return ans;
    }
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        vector<int> leftmin = leftmin_ans(heights, n);
        vector<int> rightmin = rightmin_ans(heights, n);

        int ans = 0;
        for(int i=0; i<n; i++){
            int length = heights[i];
            int breadth = rightmin[i] - leftmin[i] - 1;  // Correct breadth calculation
            ans = max(ans, length * breadth);
        }
        return ans;
    }
};
