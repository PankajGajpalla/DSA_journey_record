//the formula u see -? every 
// arr[1] = x + diff[0]
// arr[2] = arr[1] + diff[1] = x + diff[0] + diff[1]
// arr[3] = ...


// arr[0] = x
// arr[1] = x + prefix_sum[1]
// arr[2] = x + prefix_sum[2]
// ...

// prefix[i] = diff[0] + diff[1] + ... + diff[i-1]

// arr[i] = x + prefix[i]

// x + mini ‚â• lower ‚Üí x ‚â• lower - mini

// x + maxi ‚â§ upper ‚Üí x ‚â§ upper - maxi

// x ‚àà [lower - mini, upper - maxi]

class Solution {
public:
    int numberOfArrays(vector<int>& differences, int lower, int upper) {
        long sum =0, mini = 0, maxi = 0; //initialize this 

        for(auto i: differences){ //loop over differences
            sum += i; // keep adding the value of differences in i to calculate the cummulative sum
            mini = min(mini, sum); // cummulative min
            maxi = max(maxi, sum);// cummulative maxi

        }
        return max(0L, (upper-maxi) - (lower-mini) +1); //to compare we need to convert the zero to long
        //returns the nuber of arrays that satisfies the condition to understand better just read the gpt;
    }
};

//most important thing 

// üîç Step-by-Step Derivation of the Formula:
// Let‚Äôs say:

// You pick a value for arr[0] = x

// You compute the rest of the array like:

// Copy
// Edit
// arr[1] = x + diff[0]
// arr[2] = arr[1] + diff[1] = x + diff[0] + diff[1]
// arr[3] = ...
// So, the array becomes:

// cpp
// Copy
// Edit
// arr[0] = x
// arr[1] = x + prefix_sum[1]
// arr[2] = x + prefix_sum[2]
// ...
// Let‚Äôs define a prefix sum of diff:

// cpp
// Copy
// Edit
// prefix[i] = diff[0] + diff[1] + ... + diff[i-1]
// So the array values are:

// cpp
// Copy
// Edit
// arr[i] = x + prefix[i]
// üß† Key Insight:
// We want all of these values arr[i] = x + prefix[i] to lie in [lower, upper]

// So the maximum value x + max(prefix[i]) must ‚â§ upper

// And the minimum value x + min(prefix[i]) must ‚â• lower

// ‚úÖ Rearranging those:
// x + mini ‚â• lower ‚Üí x ‚â• lower - mini

// x + maxi ‚â§ upper ‚Üí x ‚â§ upper - maxi

// So valid x values (i.e., starting values for arr[0]) are in the range:

// cpp
// Copy
// Edit
// x ‚àà [lower - mini, upper - maxi]
// üßÆ Number of valid values for x:
// The number of integers in this interval is:

// lua
// Copy
// Edit
// (upper - maxi) - (lower - mini) + 1
// = upper - lower - maxi + mini + 1
// That‚Äôs how this formula comes in:

// cpp
// Copy
// Edit
// max(0L, upper - lower - maxi + mini + 1)
// We also wrap it with max(0L, ...) to make sure the result isn't negative (which would mean no valid starting point exists).

// üìå Summary:
// mini = most negative dip in prefix sum ‚Üí how low the array can go relative to arr[0]

// maxi = highest peak in prefix sum ‚Üí how high the array can go relative to arr[0]

// We ensure arr[0] is chosen so that the full range [arr[0] + mini, arr[0] + maxi] lies inside [lower, upper]

// The formula calculates how many such arr[0] values exist
