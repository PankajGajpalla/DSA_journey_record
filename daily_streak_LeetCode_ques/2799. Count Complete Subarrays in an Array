class Solution {
public:
    int countCompleteSubarrays(vector<int>& nums) {
       int left = 0;
       int count = 0;
       
       //first we create a set put all values and then calculate the size to get all the unique values that we need to satisfy the condition

       int k = unordered_set<int>(nums.begin(), nums.end()).size(); 

       unordered_map<int, int> mpp; //creating a map to store the count and help us to move in window;

       for(int i=0; i<nums.size();i++){
        mpp[nums[i]]++; //puting the values inside the mapp and counting keep track
        while(mpp.size() == k){ //as soon as the mpp size = set size that means we have all the unique value
            count += nums.size()-i;// as we have all the unique value then whatever else we add to the subarray also satisfies the condition so we calculate the total subarray form from this
            mpp[nums[left]]--; //deducting the first nums value to move forward in the window 
            if(mpp[nums[left]] == 0) mpp.erase(nums[left]); //if the first element is completelly removed then we erase it from map so that the condition is not true untile we find the element again
            left++; //decreasing the window size 
        }
       }
       return count;
    }
};

// brute force:)
// class Solution {
// public:
//     int countCompleteSubarrays(vector<int>& nums) {
//         unordered_set<int> unique;
//         for(int i=0; i<nums.size(); i++){
//             unique.insert(nums[i]);
//         }
//         int n = unique.size();

//         int count =0;
//         for(int i=0; i<nums.size(); i++){
//             unordered_set<int> test;
//             for(int j=i; j<nums.size(); j++){
//                 test.insert(nums[j]);
//                 if(test.size() == n) count++;
//             }
//             test.clear();
//         }
//         return count;
//     }
// };
