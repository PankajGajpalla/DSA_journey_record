//approach1
// User function template for C++

class Solution {
  private:
  bool row_knows(vector<vector<int>> mat, int row, int n){
    //   bool knows = false;
      for(int i=0; i<n; i++){
          if(i == row) continue;
          if(mat[row][i] != 0){
              return true;
          }
      }
      return false;
  }
  bool col_knows(vector<vector<int>> mat, int col, int n){
      for(int i=0; i<n; i++){
          if(i == col) continue;
          if(mat[i][col] != 1){
              return false;
          }
      }
      return true;
  }
  
  public:
    // Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& mat) {
        int n = mat.size();
        
        bool knows = false;
        for(int i=0; i<n; i++){
            if(row_knows(mat, i, n) == false){
                if(col_knows(mat, i, n) == true){
                    return i;
                }
            }
            
        }
        return -1;
    }
};






//approach 2
class Solution {
  private:
    bool knows(vector<vector<int>> & mat, int a, int b, int n){
        if(mat[a][b] == 1){
            return true;
        }else{
            return false;
        }
    }
  public:
    // Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& mat) {
        int n = mat.size();
        
        stack<int> st;
        for(int i=0; i<n; i++){
            st.push(i);
        }
        
        while(st.size()>1){
            int a = st.top();
            st.pop();
            int b = st.top();
            st.pop();
            
            if(knows(mat, a, b, n)){
                st.push(b);
            }else{
                st.push(a);
            }
        }
        
        int candidate = st.top();
        
        // check row 
        for(int i=0; i<n; i++){
            if(i == candidate) continue;
            if(mat[candidate][i] != 0 ){
                return -1;
            }
        }
        //check col
        for(int i=0; i<n; i++){
            if(i==candidate) continue;
            if(mat[i][candidate] != 1) return -1;
        }
        
        return candidate;
    }
};
