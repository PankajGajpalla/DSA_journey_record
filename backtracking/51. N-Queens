class Solution {
public:

    void addans(vector<vector<int>> &board, vector<vector<string>> &ans, int n){
        vector<string> temp;
        for(int i=0; i<n; i++){
            string st = "";
            for(int j=0; j<n; j++){
                if(board[i][j] == 0){
                    st.push_back('.');
                }else{
                    st.push_back('Q');
                }
            }
            temp.push_back(st);
        }

        ans.push_back(temp);
        return;
    }

    bool isSafe(int row, int col, vector<vector<int>> &board, vector<vector<string>> &ans, int n){
        int x =row;
        int y = col;

        while(y>=0){
            if(board[x][y] == 1) return false;
            y--;
        }

        x=row;
        y=col;
        while(x>=0 && y>=0){
            if(board[x][y] == 1) return false;
            y--;
            x--;
        }

        x=row;
        y=col;
        while(x<n && y>=0){
            if(board[x][y] ==1 ) return false;
            x++;
            y--;
        }

        return true;
    }


    void solve(int col, vector<vector<int>> &board, vector<vector<string>> &ans, int n){
        //base case
        if(col == n){
            addans(board, ans, n);
            return;
        }

        //else
        for(int row=0; row<n; row++){
            if(isSafe(row, col, board, ans, n)){
                board[row][col] = 1;
                solve(col+1, board, ans, n);
                board[row][col] = 0;
            }
        }

        return;
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<int>> board(n, vector<int>(n, 0));
        vector<vector<string>> ans;

        solve(0, board, ans, n);
        return ans;
    }
};
