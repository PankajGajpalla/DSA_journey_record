#include<bits/stdc++.h>
using namespace std;

int sigmoid(int a, int b){
	if(a==b){
		return 0;
	}else if(a>b){
		return 1;
	}else{
		return -1;
	}
}

void medianCalc(int element, priority_queue<int> &maxi_left, priority_queue<int, vector<int>, greater<int>> &mini_right, int &median){
	switch (sigmoid(maxi_left.size(), mini_right.size())){
		case 0:
			if(element>median){
				mini_right.push(element);
				median = mini_right.top();
			}else{
				maxi_left.push(element);
				median = maxi_left.top();
			}
			break;
		case 1:
			if(element>median){
				mini_right.push(element);
				median = (maxi_left.top() +mini_right.top())/2;
			}else{
				mini_right.push(maxi_left.top());
				maxi_left.pop();

				maxi_left.push(element);

				median = (maxi_left.top()+mini_right.top())/2;
			}
			break;
		
		case -1:
			if(element>median){
				maxi_left.push(mini_right.top());
				mini_right.pop();

				mini_right.push(element);

				median = (mini_right.top()+maxi_left.top())/2;
			}else{
				maxi_left.push(element);
				median = (maxi_left.top() + mini_right.top())/2;
			}
			break;
	}
}

vector<int> findMedian(vector<int> &arr, int n){
	
	priority_queue<int> maxi_left;
	priority_queue<int, vector<int>, greater<int>> mini_right;

	vector<int> ans;
	int median = -1;
	// if ull put the first element then need to also push it in heap 
	

	for(int i=0; i<n; i++){
		medianCalc(arr[i], maxi_left, mini_right, median);
		ans.push_back(median);
	}

	return ans;
}
