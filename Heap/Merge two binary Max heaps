class Solution{
    public:
    void heapify(vector<int> &arr, int i, int n){
        int largest = i;
        int left = i*2 +1; 
        int right = i*2 +2;
        
        if(left< n && arr[largest]<arr[left]){
            largest = left;
        }
        if(right< n && arr[largest]<arr[right]){
            largest = right;
        }
        
        if(largest != i){
            swap(arr[largest], arr[i]);
            heapify(arr, largest, n);
        }
    }
    vector<int> mergeHeaps(vector<int> &a, vector<int> &b, int n, int m) {
        vector<int> ans;
        
        for(auto i: a){
            ans.push_back(i);
        }
        for(auto i: b){
            ans.push_back(i);
        }
        
        for(int i=(n+m)/2 -1 ; i>=0; i--){
            heapify(ans, i, n+m);
        }
        
        // for(int i=0; i<n+m; i++){
        //     cout<<ans[i]<<" ";
        // }
        
        return ans;
    }
};
