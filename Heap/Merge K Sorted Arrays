#include <bits/stdc++.h> 
class node{
    public:
    int data;
    int i; 
    int j;
    node(int data, int i, int j){
        this->data = data;
        this->i = i;
        this->j = j;
    }
};

class compare{
    public:
    bool operator()(node*a ,node* b){
        return a->data >  b->data;
    }
};

vector<int> mergeKSortedArrays(vector<vector<int>>&kArrays, int k)
{
    priority_queue<node*, vector<node*>, compare> min_heap;

    //step1  fill the first elemnent of all arrays
    for(int i=0; i<kArrays.size(); i++){
        node* tmp = new node(kArrays[i][0], i, 0);
        min_heap.push(tmp);
    }    

    vector<int> ans;

    // step2
    while(!min_heap.empty()){
        node* temp = min_heap.top();
        min_heap.pop();

        ans.push_back(temp->data);

        int i= temp->i;
        int j= temp->j;
        delete temp;
        if(j+1 < kArrays[i].size()){
            node* next = new node(kArrays[i][j+1], i, j+1);
            min_heap.push(next);
        }
    }

    return ans;

}
