# plz subscribe to my youtube :)
### https://www.youtube.com/@GajpallaYT

# Code
```cpp []
// read the question carefully it says the intervals array is a non-overlapping intervals 
class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        int n = intervals.size();
        vector<vector<int>> ans;
        int i=0;
        // case1
        while(i<n && intervals[i][1]<newInterval[0]){
            ans.push_back(intervals[i]);
            i++;
        }

        // case 2
        while(i<n && intervals[i][0]<=newInterval[1]){
            newInterval[0] = min(newInterval[0], intervals[i][0]);
            newInterval[1] = max(newInterval[1], intervals[i][1]);
            i++;
        }
        ans.push_back(newInterval);
        // case 3 
        while(i<n) ans.push_back(intervals[i++]);

        return ans;
    }
};

```

# explanation
intervals = [[1,2], [3,5], [6,7], [8,10], [12,16]]
newInterval = [4,8]
We need to insert [4,8] into intervals and merge overlapping intervals.

🧠 GOAL:
Return the new list of merged intervals.

✨ Step-by-step Dry Run:
Step 0: Initial State

res = [] (result array)

i = 0

n = 5

✅ Case 1: Intervals that come before the new interval

while(i < n && intervals[i][1] < newInterval[0])
We're checking:


intervals[i][1] < newInterval[0]
i.e.,


interval[i].end < 4
Check:

[1,2] → 2 < 4 ✅ → Add to res

res = [[1,2]]

[3,5] → 5 < 4 ❌ → Stop

✅ Case 1 ends
Now: i = 1, res = [[1,2]]

🔁 Case 2: Intervals that overlap with newInterval

while(i < n && newInterval[1] >= intervals[i][0])
Check:


newInterval[1] >= intervals[i][0]
i.e.,


8 >= interval[i].start
Let’s merge:

[3,5] → 8 >= 3 ✅

newInterval = [min(4,3), max(8,5)] = [3,8]

[6,7] → 8 >= 6 ✅

newInterval = [min(3,6), max(8,7)] = [3,8]

[8,10] → 8 >= 8 ✅

newInterval = [min(3,8), max(8,10)] = [3,10]

[12,16] → 8 >= 12 ❌ → Stop

So we merged all overlapping intervals into [3,10], now push to res:


res = [[1,2], [3,10]]
✅ Case 2 ends
Now: i = 4

🧊 Case 3: Intervals that come after the merged interval
Remaining:

[12,16]

Simply push the rest:


res = [[1,2], [3,10], [12,16]]
✅ Final Answer:

[[1,2], [3,10], [12,16]]
💡 Visualization:

Original Intervals		New Interval	Merged Into
[1,2]	before	[4,8]	stays as is
[3,5]	overlaps	[4,8]	-> [3,8]
[6,7]	overlaps	[3,8]	-> [3,8]
[8,10]	overlaps	[3,8]	-> [3,10]
[12,16]	after	[3,10]	stays as is

# Approach 2

```cpp []

class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        if(intervals.size() == 0) return {newInterval};

        // intervals.push_back(newInterval);
        int flag = 0;
        for(int i=0; i<intervals.size(); i++){
            if(intervals[i][0]>=newInterval[0]){
                intervals.insert(intervals.begin()+i, newInterval);
                flag =1;
                break;
            }
        }
        if(flag == 0) intervals.push_back(newInterval);
        vector<vector<int>> ans;
        // sort(intervals.begin(), intervals.end());

        int s = intervals[0][0];
        int e = intervals[0][1];

        for(int i=1; i<intervals.size(); i++){

            if(intervals[i][0]>e){
                ans.push_back({s,e});
                s = intervals[i][0];
            }
            if(intervals[i][1]>e){
                e = intervals[i][1];
            }
        }
        ans.push_back({s,e});
        return ans;
    }
};
```
