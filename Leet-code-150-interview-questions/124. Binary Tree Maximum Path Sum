### pre-requvisit
also check the max depth of bst and max width of bst 
# Intuition
* please do dry run for better understanding
* if not node return 0
* collect left value if negative compare it with 0 so that u can ignore the negative value
* similarly collect the right value
* note:- we always update the maxi as a maximum sum of a path so we do left + right + node->value to get the maximum path value and compare with the already existing maxpath
* but, while returning the value to the upper node we cant return the maxi(maxpathsum) as it consist of the left+right+node->val which when given to a upper node will note form a path but a diverted path like a->b->(c and d) so we need to select the max out of c and d that is the left and right node and add it with the b the upper node to create a maxpath for the above node..
# Code
```cpp []
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     Tree Node() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxPathSum(TreeNode* root) {
        int maxi = INT_MIN;
        solve(root, maxi);
        return maxi;
    }

    int solve(TreeNode* node, int &maxi){
        if(!node) return 0;

        int left = max(0, solve(node->left, maxi));
        int right = max(0, solve(node->right, maxi));

        maxi = max(maxi, left + right + node->val);
        return node->val + max(left, right);
    }
};
```
