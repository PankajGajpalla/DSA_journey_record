class RandomizedSet {
    vector<int> v;
    unordered_map<int, int> mp;
public:
    RandomizedSet() {
        
    }
    bool search(int val){
        if(mp.find(val) != mp.end()){   // return true if found else flase (mp.find(val) == mp.end()) means not found
            return true;  
        }else{
            return false;
        }
    }
    
    bool insert(int val) {
        if(!search(val)){
            v.push_back(val);
            mp[val] = v.size()-1;
            return true;
        }else{
            return false;
        }
    }
    
    bool remove(int val) {
        if(!search(val)){
            return false;
        }else{
            auto it = mp.find(val);  //to get the index of val 
            v[it->second] = v.back(); //it->second gives the key ka value 
            v.pop_back();

            mp[v[it->second]] = it->second;
            mp.erase(val);
            return true;
        }
    }
    
    int getRandom() {
        if(mp.empty()) return -1;
        return v[rand()%v.size()];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
