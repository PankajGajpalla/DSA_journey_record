# Intuition
* find middle divide and conquerer 
* merge sort 
* done:)

# Code
```cpp []
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergesll(ListNode* list1, ListNode* list2){
        if(!list1){
            return list2;
        }
        if(!list2){
            return list1;
        }

        ListNode* newhead = new ListNode(-1);
        ListNode* temp = newhead;

        while(list1 != NULL && list2 != NULL){
            if(list1->val < list2->val){
                temp->next = list1;
                list1 = list1->next;
            }else{
                temp->next = list2;
                list2 = list2->next;
            }
            temp = temp->next;
        }

        while(list1 != NULL){
            temp->next = list1;
            list1 = list1->next;
            temp = temp->next;
        }
        while(list2 != NULL){
            temp->next = list2;
            list2 = list2->next;
            temp = temp->next;
        }

        return newhead->next;
    }
    ListNode* findMid(ListNode* node){
        ListNode* slow = node;
        ListNode* fast = node->next;

        while(fast != NULL && fast->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
    ListNode* sortList(ListNode* head) {
        if(head==NULL or head->next == NULL) return head;
        ListNode* midNode = findMid(head);

        ListNode* left = head;
        ListNode* right = midNode->next;
        midNode->next = NULL;

        left = sortList(left);
        right = sortList(right);

        return mergesll(left, right);
    }
};
```
