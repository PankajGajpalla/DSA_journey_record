class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if(nums.size() == 0) return 0;

        unordered_set<int> st;
        for(int i=0; i<nums.size(); i++){
            st.insert(nums[i]);
        }
        int longest = 1;
        int cnt = 0;

        for(auto it: st){
            if(st.find(it-1) == st.end()){
                cnt = 1;
                int x = it;

                while(st.find(x+1) != st.end()){
                    cnt++;
                    x = x+1;
                }
            }
            longest = max(longest, cnt);
        }
        return longest;
       
    }
};

//better approach
//  if (nums.size() == 0) return 0;
//         sort(nums.begin(), nums.end());
//         int longest = 1;
//         int last_element = INT_MIN;
//         int cnt = 0;

//         for(int i=0; i<nums.size(); i++){
//             if(nums[i]-1 == last_element){
//                 cnt++;
//                 last_element = nums[i];
//             }else if(nums[i] != last_element){
//                 cnt = 1;
//                 last_element = nums[i];
//             }
//             longest = max(longest, cnt);
//         }    
//         return longest;

//brute force
//  bool linear_search(vector<int>& nums, int n){
//         for(int i=0; i<nums.size(); i++){
//             if(nums[i] == n) return true;
//         }
//         return false;
//     }
//     int longestConsecutive(vector<int>& nums) {
//         if (nums.size() == 0) return 0;
//         int longest = 1;
//         for(int i =0; i<nums.size(); i++){
//             int x = nums[i];
//             int cnt = 1;
//             while(linear_search(nums, x+1) == true){
//                 x = x+1;
//                 cnt++;
//             }
//             longest = max(longest, cnt);
//         }
//         return longest;        
//     }
