# Intuition
1. We first check if x is 0 or 1. If it is, we know that the square root of 0 and 1 is 0 and 1 respectively, so we directly return x.

2. For any other value of x, we set up a search range between 1 and x. We initialize two variables start and end to represent the range.

3. Now comes the clever part: We use a while loop to repeatedly divide the search range in half (Binary Search) to find the square root.

3. In each iteration of the loop, we calculate the middle value mid using the formula start + (end - start) / 2. This formula ensures that we don't encounter any integer overflow when dealing with large values of x.

4. Next, we calculate the square of mid and compare it with x.

5. If the square of mid is greater than x, we know the square root lies in the lower half of the search range. So, we move the end pointer to the left to narrow down the search range.

6. If the square of mid is equal to x, we have found the square root! So, we return mid as the answer.

8. If the square of mid is less than x, we know the square root lies in the upper half of the search range. So, we move the start pointer to the right to continue the search.

9. We repeat steps 4 to 8 until the start pointer becomes greater than the end pointer. At this point, we have found the floor value of the square root, and end holds that value.

To ensure that we return the correct floor value of the square root, we round down the value of end to the nearest integer using the Math.round() method.

# Complexity
Time complexity:
The time complexity of this approach is O(logN). It's very efficient because Binary Search reduces the search range by half in each iteration, making the search faster.

Space complexity:
The space complexity is O(1), which means the amount of extra memory used is constant, regardless of the input. We only use a few variables to store the search range and the middle value during the computation.
<!-- Add your space complexity here, e.g. $$O(n)$$ -->

# Code
```cpp []
class Solution {
public:
    int mySqrt(int x) {
        if(x == 0 || x==1) return x;

        int start = 1;
        int end = x;
        int mid = -1;

        while(start<=end){
            mid = start + (end - start)/2;
            long long square = static_cast<long long>(mid) * mid;

            if(x < square){
                end = mid-1;
            }else if(x > square){
                start = mid+1;
            }else{
                return mid;
            }
        }

        return static_cast<int>(std::round(end));
    }
};
```
