class Solution {
public:
    // dfs is not working -->causing stack overflow

    // void dfs(vector<vector<char>>&board, int row,int col,int r,int c){
    //     if(row<0 || col<0 || row>=r || col>=c || board[row][col] == 'X') return;

    //     board[row][col] = 'T';

    //     dfs(board, row-1, col, r, c);
    //     dfs(board, row+1, col, r, c);
    //     dfs(board, row, col-1, r, c);
    //     dfs(board, row, col+1, r, c);
    // }


    void bfs(vector<vector<char>>& board, int row, int col, int r, int c){
        queue<pair<int, int>> q;
        board[row][col] = 'T';
        q.push({row, col});

        vector<pair<int, int>> directions = {{1,0}, {-1,0}, {0,1}, {0, -1}};

        while(!q.empty()){
            pair<int, int> p = q.front();
            q.pop();

            for(auto [x, y]: directions){ //four time loop
                int nx = p.first + x;
                int ny = p.second + y;

                if(nx>=0 && ny>=0 && nx<r &&ny<c && board[nx][ny]=='O'){
                    board[nx][ny] = 'T';
                    q.push({nx, ny});
                }

            }
        }
        
    }
    void solve(vector<vector<char>>& board) {
        int r = board.size();
        int c = board[0].size();

        //first col
        for(int i=0; i<r; i++){
            if(board[i][0] == 'O'){
                bfs(board, i, 0, r, c);
            }
            if(board[i][c-1]=='O'){
                bfs(board, i, c-1, r, c);
            }
        }

        for(int i=0; i<c; i++){
            if(board[0][i] == 'O'){
                bfs(board, 0, i, r, c);
            }
            if(board[r-1][i] == 'O'){
                bfs(board, r-1, i, r, c);
            }
        }



        for(int i=0; i<r; i++){
            for(int j=0; j<c; j++){
                if(board[i][j] == 'O'){
                    board[i][j] = 'X';
                }
                if(board[i][j] == 'T'){
                    board[i][j] = 'O';
                }
            }
        }

    }
};
