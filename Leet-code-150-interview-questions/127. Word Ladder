class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        if(beginWord == endWord) return 0;
        
        unordered_set<string>  wls(wordList.begin(), wordList.end());
        unordered_set<string> visited;
        int level = 1;
        queue<string> q;
        q.push(beginWord);
        visited.insert(beginWord);

        while(!q.empty()){
            int n = q.size();
            while(n--){
                string curr = q.front();
                q.pop();
                if(curr == endWord) return level;

                for(char ch: "abcdefghijklmnopqrstuvwxyz"){
                    for(int i=0; i<curr.length(); i++){
                        string neighbour = curr;
                        neighbour[i] = ch;
                        if(visited.find(neighbour)==visited.end() && wls.find(neighbour) != wls.end()){
                            q.push(neighbour);
                            visited.insert(neighbour);
                        }
                    }
                }
            }
            level++;
        }
        return 0;
        
    }
};
