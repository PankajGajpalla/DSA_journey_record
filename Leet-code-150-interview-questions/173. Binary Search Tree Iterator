# Intuition
* create a stack to store node and provide it when trying to access
* function stpush pushes the all the left node of the nodes till the left most node.. so at the top of stack we have the smallest node..
* now whenever we call the bstiterator by giving the root , it calles the stpush and pushes all the left most nodes of the root..
* the next access the top node present at the stack which is also the smallest node of all... then pops it and further checks if theres any right node of it , if it has the right node then it call the stpush to push it and all the other node connected below it..
* this makes possible to reach all the node.. try to dry run it..
* and finally if theres no node available in the stack then we return false ortherwise true..
* the next function beautifuly make it possible to consider all the node as it keep checking for the right node of the current node and the stpush function pushes all its left node so we have it all..

# Please upvote thanku :)âœ¨

# Code
```cpp []
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
private:
    stack<TreeNode*> st;
    void stpush(TreeNode* node){
        while(node){
            st.push(node);
            node = node->left;
        }
    }

public:
    BSTIterator(TreeNode* root) {
        stpush(root);    
    }
    
    int next() {
        TreeNode* node = st.top(); st.pop();
        if(node->right){
            stpush(node->right);
        }
        return node->val;
    }
    
    bool hasNext() {
        return !st.empty();   
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
```
