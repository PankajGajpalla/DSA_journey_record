class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> mpp;
        for(int i=0; i<nums.size(); i++){
            int n = nums[i];
            int r = target-n;
            if(mpp.find(r) != mpp.end()) return {i, mpp[r]};
            mpp[n] = i;
        }
        return {-1,-1};
    }
};

// two pointer approch 
        // sort(nums.begin(), nums.end()); 
        // but if sorted the index is changed so the answer get wrong
        // int left = 0;
        // int right = nums.size() -1;
        // while(left<right){
        //     int sum = nums[left] + nums[right];
        //     if(sum == target){
        //         return {left, right};
        //     }else if(sum>target){
        //         right--;
        //     }else{
        //         left++;
        //     }
        // }
        // return {-1, -1};

// vector<int> twoSum(vector<int>& nums, int target){
//     map <int, int> map;
//             for(int i=0; i<nums.size(); i++){
//                 int n = nums[i];
//                 int r = target - n;
//                 if(map.find(r) !=  map.end()){
//                     return {map[r], i};
//                 }
//                 map[nums[i]] = i;
//             }      
//             return {-1,-1};
// }


// vector<int> twoSum(vector<int>& nums, int target) {
//         vector<int> v;
//         for(int i=0; i<nums.size(); i++){
//             for(int j=i+1; j<nums.size(); j++){
//                 int sum = nums[i] + nums[j];
//                 if(sum == target){
//                     v.push_back(i);
//                     v.push_back(j);
//                     return v;
//                 }
//             }
//         }
//         return {-1,-1};        
//     }
