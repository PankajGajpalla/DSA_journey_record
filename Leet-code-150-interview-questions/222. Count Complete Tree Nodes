Intuition
find out the left height of the tree
find out the right height of the tree
if its equal that means its a complete bst which have 2^h -1 nodes (h is depth or level)
so if we understand this basic concept then insted of root we can check it every time for left or right side which will help us to instantly find the no. of nodes without traversing.. :)
done..
Please upvote✌ thanku :)✨
Code
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int leftHeight(TreeNode* node){
        int h = 0;
        while(node){
            h++;
            node = node->left;
        }
        return h;
    }
    int rightHeight(TreeNode* node){
        int h = 0;
        while(node){
            h++;
            node = node->right;
        }
        return h;
    }
    int countNodes(TreeNode* root) {
        if(!root) return 0;

        int lh = leftHeight(root);
        int rh = rightHeight(root);
        if(lh == rh){
            return (1<<lh)-1;
        }

        return 1 + countNodes(root->left) + countNodes(root->right);
    }
};
