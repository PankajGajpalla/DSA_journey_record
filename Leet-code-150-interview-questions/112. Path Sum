### explanation
* if not root return always 
* if not root->left and not root->right that means it is a leaf node so check wheather the targetSum that we have been subtracting is now equal to the leaf node?
* if it is equal then return true else return false
* calling for the left side of the root 
* calling for the right side of the root
* each time we subtract the value of root from the targetSum itself and then we call the function again
* in the last we check if either side meats the requirement we return true;
* try to dry run and see the clear picture 

## dry run
* 22-5 = 17
* 17-4 = 13 
* 13-11 = 2
* now 2 is the leaf node so is the targetSum(which is now 2 after repeted subtraction ) == leaf node (2)? 
* yes return true :)* 


# Code
```cpp []
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool hasPathSum(TreeNode* root, int targetSum) {
        if(!root) return false;
        if(!(root->left) && !(root->right)){
            return targetSum == root->val;
        }

        bool left_sum = hasPathSum(root->left, targetSum - root->val);
        bool right_sum = hasPathSum(root->right, targetSum - root->val);

        return left_sum || right_sum;
    }
};
```
