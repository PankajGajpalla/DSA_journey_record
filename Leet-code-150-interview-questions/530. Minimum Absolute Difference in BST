# Intuition
* create a prev node to keep track of previous nodes 
* do a inorder traversal and each time check and update the minans


# Code
```cpp []
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void solve(TreeNode* root, TreeNode* &prev, int &minans){
        if(!root) return;
        solve(root->left, prev, minans);
        if(prev){
            minans = min(minans, abs(prev->val - root->val));
        }
        prev = root; //if not passed by refrence then You are passing prev by value, not by reference.
                    // This means the updates to prev inside recursive calls wonâ€™t persist across different calls.
                    // Each recursive call gets its own copy of prev, so it's not tracking the previous node correctly during in-order traversal.
        solve(root->right, prev, minans);
        
    }
    int getMinimumDifference(TreeNode* root) {
        int minans = INT_MAX;
        TreeNode* prev = nullptr;
        solve(root, prev, minans);
        return minans;        
    }
};
```

# Code
```cpp []

class Solution {
public:
    int minDiff = INT_MAX;
    TreeNode* prev = nullptr;

    void inorder(TreeNode* root) {
        if (!root) return;

        inorder(root->left); // Left

        if (prev) {
            minDiff = min(minDiff, abs(root->val - prev->val));
        }
        prev = root; // Update previous

        inorder(root->right); // Right
    }

    int getMinimumDifference(TreeNode* root) {
        inorder(root);
        return minDiff;
    }
};
```
