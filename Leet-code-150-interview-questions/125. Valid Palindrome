class Solution:
    def isPalindrome(self, s: str) -> bool:
        #using Regex
        s = re.sub('[^a-zA-Z0-9]', '', s).lower()

        return s == s[::-1]

# s = "He@llo! 2024#"
# cleaned = re.sub('[^a-zA-Z0-9]', '', s)
# print(cleaned)
# Hello2024


# in python using alnum (only alpha numeric)
# class Solution:
#     def isPalindrome(self, s: str) -> bool:
#         s = " ".join(c.lower() for c in s if c.isalnum())
#         left = 0
#         right = len(s) -1
#         while(left<right):
#             if(s[left] != s[right]):
#                 return False
#             left +=1
#             right -=1
        
#         return True


# in cpp

# class Solution {
# private:
#     bool valid(char ch){
#         if((ch>='a' && ch<='z') || (ch>='A' && ch<='Z') || (ch>='0' && ch<='9')){
#             return 1;
#         }else{
#             return 0;
#         }
#     }
#     char lowercase(char ch){
#         if((ch>='a' && ch<='z') || (ch>='0' && ch<='9')){
#             return ch;
#         }else{
#             char temp = ch -'A' +'a';
#             return temp;
#         }
#     }

# public:
#     bool isPalindrome(string s) {
#         string temp="";
#         for(int i=0;i<s.length();i++){
#             if(valid(s[i])){
#                 temp.push_back(lowercase(s[i]));
#             }
#         }
#         int st=0;
#         int e=temp.length()-1;
#         while(st<e){
#             if(temp[st++] != temp[e--]){
#                 return 0;
#             }
#         }
#         return 1;   
#     }
# };
