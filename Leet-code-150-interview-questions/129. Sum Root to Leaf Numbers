explanation (just read..)
this question is similar to path sum solve it first (112. Path Sum)

create a int current and default value = 0, this is important we need something to keep adding on..
if not root return 0;
every time we call we add the value of the node to currernt till we reach the leaf node to form a complete number
then from left we recive a number and from right we recive a number and keep addint this number
and forwarding to above and finally get our answer
dry run
recursion seems very confusing until u do a dry run a step by step execution of the code to understand how it really works..
4->9->5 + 4->9->1 return 996 this value is recived by node 9 which gives it to root node, similarly we recive
4->0 from right and finally we add 996+40 return 1026:)
Code
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int sumNumbers(TreeNode* root, int current = 0) {
        if(!root) return 0;
        current = current*10 + root->val;
        if(!(root->left) && !(root->right)){
            return current;
        }

        int left = sumNumbers(root->left, current);
        int right = sumNumbers(root->right, current);

        return left+right;
        
    }
};
