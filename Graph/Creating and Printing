
vector < vector < int >> printAdjacency(int n, int m, vector < vector < int >> & edges) {
    vector<int> ans[n]; //watch [] and () check at the bottom
    for(int i=0; i<m; i++){
        int u = edges[i][0];
        int v = edges[i][1];

        ans[u].push_back(v);
        ans[v].push_back(u);
    }

    vector<vector<int>> output(n);
    for(int i=0; i<n; i++){

        output[i].push_back(i);
        for(int j=0; j<ans[i].size(); j++){
            output[i].push_back(ans[i][j]);
        }
    }
    return output;
}

// Great question! The difference lies in how these two statements define the `ans` variable:

// ---

// ### 1. `vector<int> ans[n];`

// * **Type**: An **array** of `n` vectors of integers.
// * This is **C-style array syntax**, valid only when `n` is a **compile-time constant** (like `int n = 10;`) or used in global scope (with some compiler-specific support).
// * **Each `ans[i]` is a vector<int>**, and you have `n` such vectors.

// #### Example:

// ```cpp
// int n = 3;
// vector<int> ans[n]; // creates 3 vectors: ans[0], ans[1], ans[2]
// ans[0].push_back(1);
// ans[1].push_back(2);
// ```

// ---

// ### 2. `vector<vector<int>> ans(n);` or `vector<int> ans(n);`

// * This is a **single vector of size `n`**.
// * `vector<int> ans(n);` means a vector of integers with `n` elements, all default-initialized (0s).
// * `vector<vector<int>> ans(n);` means a vector of `n` vectors of integers ? similar in structure to the first case but using **STL** rather than C-style arrays.
// * This works even when `n` is not a constant.

// #### Example:

// ```cpp
// int n = 3;
// vector<vector<int>> ans(n); // Creates 3 empty vectors: ans[0], ans[1], ans[2]
// ans[0].push_back(1);
// ans[1].push_back(2);
// ```

// ---

// ### Key Differences:

// | Feature                      | `vector<int> ans[n];`    | `vector<vector<int>> ans(n);` |
// | ---------------------------- | ------------------------ | ----------------------------- |
// | Type                         | C-style array of vectors | STL vector of vectors         |
// | Requires `n` to be constant? | Yes (in most cases)      | No                            |
// | Safer & more flexible?       | ?                        | ?                             |
// | Preferred in modern C++      | ?                        | ?                             |

// ---

// ### Conclusion:

// ? **Use `vector<vector<int>> ans(n);`** ? it's modern, flexible, and works with dynamic sizes. Avoid `vector<int> ans[n];` unless you **really** need a fixed-size array and are sure about `n` being constant.
