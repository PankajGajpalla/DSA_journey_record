#include<bits/stdc++.h>
vector<int> shortestPath( vector<pair<int,int>> edges , int n , int m, int s , int t){
	
	unordered_map<int, list<int>> adj;
	for(int i=0; i<edges.size(); i++){
		int u = edges[i].first;
		int v = edges[i].second;

		adj[u].push_back(v);
		adj[v].push_back(u);
	}

	unordered_map<int, bool> visited;
	unordered_map<int, int> parent;
	// parent[s] = -1;

	queue<int> q;
	q.push(s);
	parent[s] = -1;
	visited[s] = 1;

	while(!q.empty()){
		int front = q.front();
		q.pop();
		for(auto neigbhour: adj[front]){
			if(!visited[neigbhour]){
				q.push(neigbhour);
				visited[neigbhour] = 1;
				parent[neigbhour] = front;
			}
		}
	}

	if(!visited[t]) return {};

	vector<int> ans;

	int currnode = t;
	ans.push_back(currnode);
	while(currnode != s){
		currnode = parent[currnode];
		ans.push_back(currnode);
	}

	
	
	reverse(ans.begin(), ans.end());
	return ans;
	
}
