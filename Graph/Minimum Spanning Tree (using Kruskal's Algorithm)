#include<bits/stdc++.h>
using namespace std;

int cmp(vector<int>&a, vector<int>&b){
  return a[2]<b[2];
}

void makeSet(vector<int>&parrent, vector<int>&rank, int n){
  for(int i=0; i<n; i++){
    parrent[i] = i;
    rank[i] = 0;
  }
}

int findParent(vector<int>& parrent, int node){
  if(parrent[node] == node) return node;

  return parrent[node] = findParent(parrent, parrent[node]);
}

void unionSet(vector<int>&parrent, int x, int y, vector<int>&rank){
  int u = findParent(parrent, x);
  int v = findParent(parrent, y);

  if(rank[u]<rank[v]){
    parrent[u] = v;
  }else if(rank[v]<rank[u]){
    parrent[v] = u;
  }else{
    parrent[v] = u;
    rank[u]++;
  }
}


int minimumSpanningTree(vector<vector<int>>& edges, int n)
{
  sort(edges.begin(), edges.end(), cmp);
  
  vector<int> parrent(n);
  vector<int> rank(n);
  makeSet(parrent, rank, n);

  int minWeight = 0;

  for(int i=0; i<edges.size(); i++){
    int u = findParent(parrent, edges[i][0]);
    int v = findParent(parrent, edges[i][1]);
    int w = edges[i][2];

    if(u != v){
      minWeight += w;
      unionSet(parrent, u, v, rank);
    }
  }
  return minWeight;


}
