#include<list>
#include<unordered_map>
bool cycleDetection(int node, unordered_map<int, bool> &visited, unordered_map<int, bool>&dfsvisited, unordered_map<int, list<int>> &adj){
  visited[node] = 1;
  dfsvisited[node] = 1;

  for(auto neigbhour: adj[node]){
    if(!visited[neigbhour]){
      bool cyclicFound = cycleDetection(neigbhour, visited, dfsvisited, adj);
      if(cyclicFound) return true;
    }
    else if(dfsvisited[neigbhour]) return true;
  }

  dfsvisited[node] = false;
  
  return false;
}

int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  
  unordered_map<int, list<int>> adj;
  for(int i=0; i<edges.size(); i++){
    int u = edges[i].first;
    int v = edges[i].second;

    adj[u].push_back(v);
  }

  unordered_map<int, bool> visited;
  unordered_map<int, bool> dfsvisited;

  for(int i=1; i<=n; i++){
    if(!visited[i]){
      bool cyclicFound = cycleDetection(i, visited, dfsvisited, adj);
      if(cyclicFound) return true;
    }
  }

  return false;
}
