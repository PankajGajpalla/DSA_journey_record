#include<unordered_map>
#include<list>
#include<queue>
#include<iostream>
using namespace std;
int isCyclic(int src, unordered_map<int, bool> &visited, unordered_map<int, list<int>> &adj){
    unordered_map<int, int> parent;
    parent[src] = -1;
    visited[src] = 1;
    queue<int> q;
    q.push(src);

    while(!q.empty()){
        int front = q.front();
        q.pop();

        for(auto neigbhour: adj[front]){
            if((visited[neigbhour] == 1) &&( neigbhour != parent[front]) ){
                return 1;
            }else if(!visited[neigbhour]){
                q.push(neigbhour);
                visited[neigbhour] = 1;
                parent[neigbhour] = front;
            }
        }
    }

    return -1;
}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    unordered_map<int, list<int>> adj;
    for(int i=0; i<m; i++){
        int u = edges[i][0];
        int v = edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    unordered_map<int, bool> visited;

    for(int i=0; i<n; i++){
        if(!visited[i]){
            int ans = isCyclic(i, visited, adj);
            if(ans == 1){
                return "Yes";
            }
        }
    }
    return "No";


}
