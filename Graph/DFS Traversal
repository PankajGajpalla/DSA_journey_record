void dfs(int node, vector<int> &component, unordered_map<int, list<int>>&adj, unordered_map<int, bool>&visited){
    component.push_back(node);
    visited[node] = 1;

    for(auto i: adj[node]){
        if(!visited[i]){
            dfs(i, component, adj, visited);
        }
    }
}

vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    unordered_map<int, list<int>> adj;

    for(auto i: edges){
        int u = i[0];
        int v = i[1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    vector<vector<int>> ans;
    unordered_map<int, bool> visited;

    for(int i=0; i<V; i++){
        if(!visited[i]){
            vector<int> component;
            dfs(i, component, adj, visited);
            ans.push_back(component);
        }
    }

    return ans;
}
