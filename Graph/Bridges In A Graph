#include<bits/stdc++.h>
using namespace std;
void dfs(int node,int &parent, unordered_map<int, list<int>>& adj, int timer, vector<int>& low, vector<int>& insTime, vector<int>& visited, vector<vector<int>>&result){

    visited[node] = 1;
    low[node] = insTime[node] = timer++;

    for(auto ngbh: adj[node]){
        if(ngbh == parent) continue;

        if(!visited[ngbh]){
            dfs(ngbh, node, adj, timer, low, insTime, visited, result);
            low[node] = min(low[node], low[ngbh]);

            //check edge is bridge?
            if(low[ngbh]>insTime[node]){
                vector<int> ans;
                ans.push_back(ngbh);
                ans.push_back(node);
                result.push_back(ans);
            }
        }
        else{
            //back edge
            low[node] = min(low[node], insTime[ngbh]);
        }
    }


}
vector<vector<int>> findBridges(vector<vector<int>> &edges, int v, int e) {
    unordered_map<int, list<int>> adj;

    for(int i=0; i<edges.size(); i++){
        int u = edges[i][0];
        int v = edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    int timer = 0;

    vector<int> low(v, -1);
    vector<int> insTime(v, -1);
    int parent = -1;
    vector<int> visited(v, 0);

    vector<vector<int>> result;

    for(int i=0; i<v; i++){
        if(!visited[i]){
            dfs(i,parent, adj, timer, low, insTime, visited, result);
        }
    }
    
    return result;

}
