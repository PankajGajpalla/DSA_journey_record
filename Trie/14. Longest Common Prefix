class TrieNode{
    public:
    char data;
    TrieNode* children[26];
    bool isTerminal;

    int childCount; 

    TrieNode(char ch){
        data = ch;
        for(int i=0; i<26; i++){
            children[i] = NULL;
        }
        isTerminal = false;
        childCount = 0;
    }
};

class Trie{
    public:
    TrieNode* root;

    Trie(){
        root = new TrieNode('\0');
    }

    void insertUtil(TrieNode* root, string word){

        if(word.length() == 0){
            root->isTerminal = true;
            return;
        }

        int index = word[0] - 'a';
        TrieNode* child;

        if(root->children[index] !=NULL){
            child = root->children[index]; 
        }else{
            child = new TrieNode(word[0]);
            root->childCount++;
            root->children[index] = child;
        }

        insertUtil(child, word.substr(1));
    }

    void insertz(string word){
        insertUtil(root, word);
    }

    void lcp(string first, string &ans){
    TrieNode* curr = root;

    for(int i=0; i<first.length(); i++){
        char ch = first[i];
        int index = ch - 'a';

        if(curr->childCount == 1 && !curr->isTerminal){
            ans.push_back(ch);
            curr = curr->children[index];
        } else {
            return;
        }
    }
}

};

class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
    Trie* t = new Trie();

    for(int i=0; i<strs.size(); i++){
        t->insertz(strs[i]);
    }

    string first = strs[0];
    string ans = "";

    t->lcp(first, ans);

    return ans;
    }
};
