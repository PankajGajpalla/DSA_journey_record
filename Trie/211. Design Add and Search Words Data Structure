class TrieNode{
public:
    char data;
    TrieNode* children[26];
    bool isTerminal;

    TrieNode(char data){
        this->data = data;
        for(int i=0; i<26; i++){
            children[i] = NULL;
        }
        isTerminal = false;
    }
};

class WordDictionary {
public:
    TrieNode* root;

    WordDictionary() {
        root = new TrieNode('\0');
    }

    void adding(TrieNode* root, string word){
        //base case
        if(word.length() == 0){
            root->isTerminal = true;
            return;
        }

        int index = word[0] - 'a';
        TrieNode* child;

        if(root->children[index] != NULL){
            child = root->children[index];
        }else{
            child = new TrieNode(word[0]);
            root->children[index] = child;
        }

        adding(child, word.substr(1));
        return;

    }
    
    void addWord(string word) {
        adding(root, word);
    }


    bool searchword(TrieNode* root, string word){
        //base case
        if(word.length() == 0){
            return root->isTerminal;
        }

        char ch = word[0];
        string remaining = word.substr(1);

        if(ch == '.') {
            for(int i = 0; i < 26; i++) {
                if(root->children[i] != NULL) {
                    if(searchword(root->children[i], remaining)) {
                        return true;
                    }
                }
            }
            return false;
        } else {
            int index = ch - 'a';
            TrieNode* child = root->children[index];
            if(child == NULL) return false;
            return searchword(child, remaining);
        }
    }

    bool search(string word) {
        return searchword(root, word);
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */
