/*************************************************************

    Following is the Binary Tree node structure:

    class TreeNode
    {
    public:
        int data;
        TreeNode *left, *right;
        TreeNode() : data(0), left(NULL), right(NULL) {}
        TreeNode(int x) : data(x), left(NULL), right(NULL) {}
        TreeNode(int x, TreeNode *left, TreeNode *right) : data(x), left(left), right(right) {}
    };

*************************************************************/
void converIntoSortedDLL(TreeNode* root, TreeNode* &head){
    if(root == NULL) return;

    converIntoSortedDLL(root->right, head);

    root->right = head;
    if(head != NULL){
        head->left = root;
    }

    head = root;
    
    converIntoSortedDLL(root->left, head);
}

TreeNode* mergeLinkedList(TreeNode* head1, TreeNode* head2){
    TreeNode* head = NULL;
    TreeNode* tail = NULL;

    while(head1 != NULL && head2 != NULL){
        if(head1->data  < head2->data){
            if(head == NULL){
                head = head1;
                tail = head1;
                head1 = head1->right;
            }else{
                tail->right = head1;
                head1->left = tail;
                tail = head1;
                head1 = head1->right;
            }
        }else{
            if(head == NULL){
                head = head2;
                tail = head2;
                head2 = head2->right;
            }else{
                tail->right = head2;
                head2->left = tail;
                tail = head2;
                head2 = head2->right;
            }
        }
    }
    while(head1 != NULL){
        tail->right = head1;
        head1->left = tail;
        tail = head1;
        head1 = head1->right;
    }
    while(head2 != NULL){
        tail->right = head2;
        head2->left = tail;
        tail = head2;
        head2 = head2->right;
    }

    return head;
}

int countNOdes(TreeNode* &head){
    int cnt = 0;
    TreeNode* temp = head;
    while(temp !=NULL){
        cnt++;
        temp=  temp->right;
    }
    return cnt;
}

TreeNode* sortedLLToBST(TreeNode* &head, int n){
    //basecase 
    if(n<=0 || head == NULL) return NULL;

    TreeNode* left = sortedLLToBST(head, n/2);

    TreeNode* root = head;
    root->left = left;

    head = head->right;
    root->right = sortedLLToBST(head,n- n/2 -1);

    return root;
}

void bstToInorder(TreeNode* &root, vector<int> &ans){
    if(root == NULL) return ;

    bstToInorder(root->left, ans);
    ans.push_back(root->data);
    bstToInorder(root->right, ans);
}
vector<int> mergeBST(TreeNode *root1, TreeNode *root2)
{
    TreeNode* head1 = NULL;
    converIntoSortedDLL(root1, head1);

    TreeNode* head2 = NULL;
    converIntoSortedDLL(root2, head2);

    TreeNode* head = mergeLinkedList(head1, head2);

    TreeNode* root = sortedLLToBST(head, countNOdes(head));

    vector<int> ans;
    bstToInorder(root, ans);
    return ans;
}
